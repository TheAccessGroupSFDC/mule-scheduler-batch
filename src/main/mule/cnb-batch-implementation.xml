<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:json-logger="http://www.mulesoft.org/schema/mule/json-logger"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json-logger http://www.mulesoft.org/schema/mule/json-logger/current/mule-json-logger.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd">
		<sub-flow name="batch-cnb-get-contract-lines" doc:id="6e9b640f-02ed-4b4b-842d-22b35dbb0d07" >
		 <json-logger:logger doc:name="Logger" doc:id="99cc29bf-c1ac-4aba-8dff-e64c3804f2cf" config-ref="JSON_Logger_Config_cnb" message="Received Service Contract Lines VM message">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<flow-ref doc:name="Retrieve and Set Time Stamps" doc:id="59e937fd-4630-4c74-b5bb-f392405f9d00" name="timestamp-set-and-retrieve-subflow" />
		<set-variable value="#[1 as Number]" doc:name="Set Variable offset" doc:id="c949faf8-4df3-46b6-973e-8cb54736cbb6" variableName="offset" />
		<set-variable value="#[100 as Number]" doc:name="Set Variable limit" doc:id="73370654-35c3-406f-82aa-b50875927274" variableName="limit" />
		<flow-ref doc:name="Get Contract Lines Callout" doc:id="aef6aaf0-63df-4bff-891c-0c11e69e70f6" name="cnb-get-contract-lines-callout-subflow" />
		<ee:transform doc:name="Transform Message" doc:id="ca058a74-e722-4730-8ca7-7b5c48ad1791">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="initialResponseMetaInformation"><![CDATA[%dw 2.0
output application/json
---
{
	"currentPage": payload.currentPage, 
   "totalPages": payload.totalPages, 
   "hasNextPage": payload.hasNextPage, 

   "hasPreviousPage": payload.hasPreviousPage,
    "contractLinesRetrieved": if(!isEmpty(payload.contractLines)) sizeOf(payload.contractLines) else 0
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<set-variable value="#[payload.hasNextPage]" doc:name="Set Variable has next page" doc:id="6f72ada6-089a-4bda-95b3-f2e0166bc2a5" variableName="hasNextPage" />
		<json-logger:logger doc:name="Logger1" doc:id="ff433177-b92d-42e7-981f-eb961f2f2a13" config-ref="JSON_Logger_Config_cnb" message='#["Service Contract Lines Meta Information after retrieving for fromDate: " ++ vars.fromDate ++ " toDate: " ++ vars.toDate]' tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    serviceContractLinesMetaInfo: JSONLoggerModule::stringifyNonJSON(vars.initialResponseMetaInformation) 
}]]]></json-logger:content>
		</json-logger:logger>
		<ee:transform doc:name="Extract contract lines from payload" doc:id="08f30cc2-560c-462a-ab92-fee43976325b">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload.contractLines]]></ee:set-payload>
			</ee:message>
		</ee:transform>

		<choice doc:name="If Payload has Contract Lines" doc:id="8eee5843-b143-483d-a893-0ffdc2e7b110">
			<when expression="#[sizeOf(payload) &gt; 0]">
				<flow-ref doc:name="Service Contract Lines PAPI Callout" doc:id="e1f544f0-f27a-4da1-9cf4-c833d423e567" name="service-contract-lines-papi-callout" />
			</when>
			<otherwise>
				<json-logger:logger doc:name="Logger" doc:id="f79a177f-7657-42ab-8ab6-983717e7de41" config-ref="JSON_Logger_Config_cnb" message="No Contract Lines changed" tracePoint="AFTER_TRANSFORM">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
		<ee:transform doc:name="Set offset and limit for VM" doc:id="4944c426-b9d3-4379-a84d-17aa79df92a5">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	"offset": vars.offset,
	"limit": vars.limit
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<choice doc:name="Check for next page" doc:id="59b96435-99d5-4326-a2b6-1bc055d9b9ae" >
			<when expression="#[vars.hasNextPage == true]" >
				<ee:transform doc:name="Transform Message" doc:id="953d74a5-f28f-4e3f-b26f-06478a86c444" >
					<ee:message />
					<ee:variables >
						<ee:set-variable variableName="totalPagesOffsets" ><![CDATA[%dw 2.0
output application/json
---
if(vars.initialResponseMetaInformation.totalPages > 1)
    (2 to vars.initialResponseMetaInformation.totalPages) map {
        offset: $,
        limit: 100
    }
else
    {}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Logger" doc:id="9aa2f779-0a77-4b4f-9c34-2b573e1a284f" config-ref="JSON_Logger_Config_cnb" message='#["Service Contract Lines: Total Pages to process: " ++ sizeOf(vars.totalPagesOffsets)]' tracePoint="FLOW" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<parallel-foreach doc:name="Parallel For Each" doc:id="66575ea5-58d1-4466-9379-bd77d48d995a" collection="#[vars.totalPagesOffsets]" maxConcurrency="${cnbContractsBatch.serviceContractsLines.parallelThreads}" >

					<json-logger:logger doc:name="Logger" doc:id="73c03981-fdf3-4af8-89bb-15f7e1b07d9a" config-ref="JSON_Logger_Config_cnb" message='#["Processing for Service Contract Lines with offset: " ++ payload.offset]' tracePoint="BEFORE_REQUEST" >
						<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
					</json-logger:logger>
					<flow-ref doc:name="Flow Reference cnb-get-contract-lines-iteration" doc:id="219fbf2c-cfbf-4d07-b476-28329f5723b2" name="cnb-get-contract-lines-iteration"/>
				</parallel-foreach>
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="a65b4919-681e-44d2-baac-00f35beb9034" config-ref="JSON_Logger_Config_cnb" message="Service Contract Lines processing completed">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    initialResponseMetaInformation: vars.initialResponseMetaInformation
}]]]></json-logger:content>
				</json-logger:logger>
				<os:clear doc:name="Clear TimeStamps" doc:id="2de6e77c-309b-4a23-83a8-7538390e4944" objectStore="TimeStamp_OS"/>
			</otherwise>
		</choice>
	</sub-flow>
	<sub-flow name="cnb-get-contract-lines-iteration" doc:id="55b8d8b4-92fd-4461-a658-5907dfcc9c19">
		<json-logger:logger doc:name="Logger" doc:id="ed9b35c1-8e92-44d5-a25c-17b3543f0069" config-ref="JSON_Logger_Config_cnb" message='#["Starting Next Offset"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<set-variable value="#[payload.offset]" doc:name="Set Var Offset" doc:id="5e8d8109-039f-4d1b-8385-b3153d3f8ff5" variableName="offset" />
		<set-variable value="#[payload.limit]" doc:name="Set Variable Limit" doc:id="7b69c911-4107-4aaa-a8de-3791135a8b2a" variableName="limit" />
		<flow-ref doc:name="Retrieve and Set Time Stamps" doc:id="1281977e-5228-4e45-ad3d-4f92815056a8" name="timestamp-set-and-retrieve-subflow" />
		<flow-ref doc:name="Get Contract Lines Callout" doc:id="38f139b1-cee7-48ac-8486-01d761d51379" name="cnb-get-contract-lines-callout-subflow" />
		<set-variable value="#[payload.hasNextPage]" doc:name="Set Variable has next page" doc:id="d6311c9d-c472-441d-8316-4123e049f8f6" variableName="hasNextPage" />
		<ee:transform doc:name="Extract contract lines from payload" doc:id="0c807424-e491-4d91-bef4-62e2511716cb">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload.contractLines]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="Service Contract Lines PAPI Callout" doc:id="40fa50f4-4fad-411e-8b0f-8f2a4ffc6c5c" name="service-contract-lines-papi-callout"/>
		<choice doc:name="Check for next page" doc:id="46ca52be-4296-4c95-b1a7-662bd4ef3c47" >
			<when expression="#[vars.hasNextPage == true]" >

				<json-logger:logger doc:name="Logger" doc:id="b80713e2-8e43-4382-a309-fdff2da83d7f" config-ref="JSON_Logger_Config_cnb" message='More Contract Lines to be processed'>
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="4e70a21a-6ce9-46e3-ba4d-2fa67aa34a55" config-ref="JSON_Logger_Config_cnb" message='#["Finished batch processing of CNB Contract Lines"]' tracePoint="END">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<os:clear doc:name="Clear TimeStamps" doc:id="4d9c41db-10da-4079-a0c4-036de094fac7" objectStore="TimeStamp_OS" />
			</otherwise>
		</choice>

	</sub-flow>
	<sub-flow name="batch-cnb-get-contracts" doc:id="6c300975-8290-4a39-a76d-6854802b5f3b" >
<!-- [STUDIO:"Retrieve timeStamp"]		<os:retrieve-all doc:name="Retrieve timeStamp" doc:id="30093dfe-f8a5-49d1-b723-1f336fd6bb2b" objectStore="TimeStamp_OS" target="timeStamps"/> [STUDIO] -->
		<json-logger:logger doc:name="Logger" doc:id="368d6250-a41d-4bb3-9d2b-71a99f2694a7" config-ref="JSON_Logger_Config_cnb" message='#["Starting batch processing of CNB Contracts"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<flow-ref doc:name="Set and Retrieve TimeStamp" doc:id="05f459dc-d311-4f3c-bc9a-03865cecea06" name="timestamp-set-and-retrieve-subflow" />
		<set-variable value="#[now()]" doc:name="Set Variable contractsStartTime" doc:id="0846405c-4121-49bf-881f-ed9734f36ae7" variableName="contractsStartTime"/>
		<set-variable value="#[1 as Number]" doc:name="Set Variable offset" doc:id="af46db0e-7dd9-4c08-88fa-6b78955e9123" variableName="offset" />
		<set-variable value="#[100 as Number]" doc:name="Set Variable limit" doc:id="c90c9bb0-1e0c-423f-8539-53b64e6ce8b6" variableName="limit" />
		<flow-ref doc:name="CNB Service Contracts Callout" doc:id="8734172d-1f72-48b0-929f-e04888a95afb" name="cnb-get-contracts-callout-subflow" />
		<ee:transform doc:name="Transform Message" doc:id="7138eef2-7315-495f-9bc5-fb40e6a50e98" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="initialResponseMetaInformation" ><![CDATA[%dw 2.0
output application/json
---
{
   "currentPage": payload.currentPage, 
   "totalPages": payload.totalPages, 
   "hasNextPage": payload.hasNextPage, 
   "hasPreviousPage": payload.hasPreviousPage,
   "contractsRetrieved": if(!isEmpty(payload.contracts)) sizeOf(payload.contracts) else 0
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<json-logger:logger doc:name="Logger" doc:id="4e308b0c-b72c-48c7-9195-56d7cc2cd28e" config-ref="JSON_Logger_Config_cnb" message='#["Service Contracts Meta Information after retrieving for fromDate: " ++ vars.fromDate ++ " toDate: " ++ vars.toDate]' tracePoint="AFTER_REQUEST">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    serviceContractsMetaInfo: JSONLoggerModule::stringifyNonJSON(vars.initialResponseMetaInformation) 
}]]]></json-logger:content>
		</json-logger:logger>
		<set-variable value="#[payload.hasNextPage]" doc:name="Set Variable has next page" doc:id="72e093be-d905-4a40-886d-6469b5c74338" variableName="hasNextPage" />
				<choice doc:name="If Contracts Updated" doc:id="9735aa30-b5d2-47fc-a13e-e3383ef408fa" >
			<when expression="#[sizeOf(payload.contracts) &gt; 0]">
				<flow-ref doc:name="Service Contracts PAPI callout" doc:id="5afd9dea-75d9-4cc2-b234-68ca1a7dd56a" name="service-contract-papi-callout" />
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="bec3cd00-29da-4d27-bb8f-f723eb0fa831" config-ref="JSON_Logger_Config_cnb" message="No Contracts changed" tracePoint="AFTER_TRANSFORM">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
	startTime: vars.contractsStartTime,
	endTime: now(),
	executionTime: now() - vars.contractsStartTime
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
		<choice doc:name="Check for next page" doc:id="af6346cd-414c-4ec9-888c-ef7fc9564edb" >
			<when expression="#[vars.hasNextPage == true]" >
				<ee:transform doc:name="Transform Message" doc:id="2cecc039-2df7-46d7-b428-8869b2ae3a75">
					<ee:message>
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="totalPagesOffsets" ><![CDATA[%dw 2.0
output application/json
---
if(vars.initialResponseMetaInformation.totalPages > 1)
    (2 to vars.initialResponseMetaInformation.totalPages) map {
        offset: $,
        limit: 100
    }
else
    {}]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
				<json-logger:logger doc:name="Logger" doc:id="6890f8c5-c656-4dd0-b51b-cc9cdb43e8d6" config-ref="JSON_Logger_Config_cnb" message='#["Service Contracts: Total Pages to process: " ++ sizeOf(vars.totalPagesOffsets)]' tracePoint="FLOW">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<parallel-foreach doc:name="Parallel For Each" doc:id="9cbfb078-bee7-4a71-b047-dc4dfa35c2ae" collection="#[vars.totalPagesOffsets]" maxConcurrency="${cnbContractsBatch.serviceContracts.parallelThreads}">
					<flow-ref doc:name="Flow Reference batch-cnb-get-contractsFlow" doc:id="bbf8c344-4296-4557-bda3-2c51cc13450d" name="batch-cnb-get-contractsFlow"/>
				</parallel-foreach>
			</when>
			<otherwise>
				<json-logger:logger doc:name="Logger" doc:id="60aaecad-885f-4b62-878e-1b99138f9bac" config-ref="JSON_Logger_Config_cnb" message='#["Finished batch processing of CNB Contracts"]' tracePoint="END">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
	startTime: vars.contractsStartTime,
	endTime: now(),
	executionTime: now() - vars.contractsStartTime
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference batch-cnb-get-contract-lines" doc:id="1f63937a-3c14-4362-993e-eb7296c49eb0" name="batch-cnb-get-contract-lines"/>
			</otherwise>
		</choice>
	</sub-flow>

	<sub-flow name="batch-cnb-get-contractsFlow" doc:id="71bdfb88-babb-4409-9f2c-799605ee0c4e" >
		<json-logger:logger doc:name="Logger" doc:id="5da52d92-8379-4c60-a946-f61bafd36023" config-ref="JSON_Logger_Config_cnb" message='#["Received Service Contracts VM Message with offset " ++ payload.offset]'>
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<set-variable value="#[payload.offset]" doc:name="Initalize offset" doc:id="206fc22c-1026-4909-a01a-a1f71504c4ed" variableName="offset" />
		<set-variable value="#[payload.limit]" doc:name="Set Variable Limit" doc:id="d2e78148-233e-4021-8b90-152e7548cc17" variableName="limit"/>
		<flow-ref doc:name="Set and Retrieve TimeStamp" doc:id="83146aee-743e-4791-bc79-5a1f5dcb1ad1" name="timestamp-set-and-retrieve-subflow" />
		<flow-ref doc:name="CNB Service Contracts Callout" doc:id="40991b64-1d70-4fb2-85d5-01713252d4ad" name="cnb-get-contracts-callout-subflow" />
		<set-variable value="#[payload.hasNextPage]" doc:name="Set Variable has next page" doc:id="c5f9d965-a841-42a7-a5eb-4c228fc5ac50" variableName="hasNextPage" />
		<flow-ref doc:name="Service Contracts PAPI callout" doc:id="b02b1d65-0668-4831-b7cc-94390fd07714" name="service-contract-papi-callout" />
		<choice doc:name="Check for next page" doc:id="a7d8e80f-1101-4572-b456-c39bae3b08c4" >
			<when expression="#[vars.hasNextPage == true]" >
				<json-logger:logger doc:name="Logger" doc:id="38f0aaa2-0b24-4648-ad05-c8c847f3c1fe" config-ref="JSON_Logger_Config_cnb" message="There are more contracts to be processed.." priority="DEBUG">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="2a7a225b-770b-47a2-83ce-8b92f1e391f8" config-ref="JSON_Logger_Config_cnb" message='#["Finished batch processing of CNB Contracts"]' tracePoint="END">
					<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
	startTime: vars.contractsStartTime,
	endTime: now(),
	executionTime: now() - vars.contractsStartTime
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference batch-cnb-get-contract-lines" doc:id="e748e4c1-a9d3-4557-aeca-9fd1a801f5bb" name="batch-cnb-get-contract-lines"/>
				<json-logger:logger doc:name="Logger" doc:id="b515af94-687d-4bd6-abda-772cc518eb17" config-ref="JSON_Logger_Config_cnb" message='#["Started batch processing of CNB Contract Lines"]' >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	</sub-flow>
		<sub-flow name="cnb-get-contracts-callout-subflow" doc:id="297a5edb-be35-475c-9a2e-3c8892389f73" >
		<json-logger:logger doc:name="Logger" doc:id="acaf0158-e5b1-4ece-b631-07646f3a91cd" config-ref="JSON_Logger_Config_cnb" message='#["Invoking GET CNB Service Contract request"]'>
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try" doc:id="7438d818-d448-4009-9080-9cbf24a3b44b" >
			<until-successful maxRetries="${cnbSystemAPI.untilsuccessful.serviceContracts.retries}" doc:name="Until Successful" doc:id="050bd6b3-ccd0-45b6-b424-b165d8bed43b" millisBetweenRetries="${cnbSystemAPI.untilsuccessful.serviceContracts.frequency}">
			<http:request method="GET" doc:name="Request Get Contracts" doc:id="c0bfcbd3-8c8b-4c0f-b900-e1b1f0eb1bcf" config-ref="CNB_System_API_HTTP_Request" path="${cnbSystemAPI.resources.serviceContracts}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
				<http:query-params><![CDATA[#[output application/java
---
{
	"offset" : (vars.offset),
	"fromDate" : (vars.fromDate),
	"limit" : (vars.limit),
	"toDate" : (vars.toDate)
}]]]></http:query-params>
			</http:request>
		</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="97c82f73-21a7-4bbd-a863-e328cfc229e0" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked GET CNB Service Contract request"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
	"currentPage": payload.currentPage,
  	"totalPages": payload.totalPages,
  	"hasNextPage": payload.hasNextPage,
  	"hasPreviousPage": payload.hasPreviousPage
}]]]></json-logger:content>
		</json-logger:logger>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="59418ebf-cb72-4eac-a3da-236bc57e79eb" >
					<json-logger:logger doc:name="Logger" doc:id="baaf4a8a-ee66-4c03-821e-1f11c5f7235d" config-ref="JSON_Logger_Config_cnb" message='#["***CRITICAL ERROR*** - Unable to fetch service contracts data from CNB API"]' tracePoint="EXCEPTION">
						<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
					</json-logger:logger>
				</on-error-propagate>
			</error-handler>
		</try>
	</sub-flow>
	
	<sub-flow name="cnb-get-contract-lines-callout-subflow" doc:id="8a18963c-9e49-42b5-ac8a-2f2ca9d1ddef" >
		<json-logger:logger doc:name="Logger" doc:id="a48d11f2-35c5-4a53-964d-f1d5b25d1baa" config-ref="JSON_Logger_Config_cnb" message='#["Invoking GET CNB Service Contract lines request"]' tracePoint="BEFORE_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try" doc:id="316e84ad-5933-4bab-b3bc-e9c5972d35ff" >
			<until-successful maxRetries="${cnbSystemAPI.untilsuccessful.serviceContractLines.retries}" doc:name="Until Successful" doc:id="4e43b4ca-052f-49a3-a916-5bf54c7a233e" millisBetweenRetries="${cnbSystemAPI.untilsuccessful.serviceContractLines.frequency}">
			<http:request method="GET" doc:name="Request Get Contract Lines" doc:id="01305f4e-d040-4dd7-854c-96ae62cfdec8" config-ref="CNB_System_API_HTTP_Request" path="${cnbSystemAPI.resources.serviceContractLines}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
				<http:query-params><![CDATA[#[output application/java
---
{
	"offset" : (vars.offset),
	"fromDate" : (vars.fromDate),
	"limit" : (vars.limit),
	"toDate" : (vars.toDate)
}]]]></http:query-params>
			</http:request>
		</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="cda89443-2e8d-47f5-b411-933e6a992e01" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked GET CNB Service Contract lines request"]' tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
	"currentPage": payload.currentPage,
  	"totalPages": payload.totalPages,
  	"hasNextPage": payload.hasNextPage,
  	"hasPreviousPage": payload.hasPreviousPage
}]]]></json-logger:content>
		</json-logger:logger>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="662c1541-b704-4a14-b6c3-04800ca0e6f2" >
					<json-logger:logger doc:name="Logger" doc:id="2c7117b4-b34d-42a1-ba20-42d64a1f531c" config-ref="JSON_Logger_Config_cnb" message='#["***CRITICAL ERROR*** - Unable to fetch service contract lines data from CNB API"]' tracePoint="EXCEPTION" >
						<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
					</json-logger:logger>
				</on-error-propagate>
			</error-handler>
		</try>
	
</sub-flow>
	<sub-flow name="invoke-error-hospital-impl-subflow" doc:id="c8a7e768-41e7-4b08-bf91-fc5128a9dda0" >
		<json-logger:logger doc:name="Logger" doc:id="14c26689-517b-4a38-b7fb-8116e2b3512d" config-ref="JSON_Logger_Config_cnb" message="Invoking Error Hospital API" tracePoint="BEFORE_REQUEST">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try" doc:id="24fb4764-5023-4e6d-a75c-24b854595ad1" >
			<http:request method="POST" doc:name="Call Error Hospital" doc:id="ff264f5f-e106-481c-aa02-0e591623320b" config-ref="SFDC_Error_Hoaspital" path="/${sfdcerrorHospitalAPI.resources.errorHospital}" sendCorrelationId="ALWAYS" correlationId="#[correlationId]" >
				<http:body ><![CDATA[#[vars.errorHospitalPayload]]]></http:body>
			</http:request>
			<json-logger:logger doc:name="Logger" doc:id="a753eb15-b6dd-4579-8298-ec859f14ec23" config-ref="JSON_Logger_Config_cnb" message="Successfully invoked Error Hospital API" tracePoint="AFTER_REQUEST" >
				<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
			</json-logger:logger>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="7e757893-0861-4731-8f67-2cec680ef8c4" >
					<json-logger:logger doc:name="Logger" doc:id="5b3972b5-3ded-4e1a-acb1-d6e4158e19b3" config-ref="JSON_Logger_Config_cnb" message='"***Urgent Error Hospital Stopped Responding For CNB Contracts Batch***"' />
				</on-error-continue>
			</error-handler>
		</try>
	</sub-flow>
		<sub-flow name="service-contract-papi-callout" doc:id="ba14ef91-df77-467b-992f-b6d04ea5f2f3" >
		<json-logger:logger doc:name="Logger" doc:id="18291442-0e69-47d6-b5cf-8835469339e3" config-ref="JSON_Logger_Config_cnb" message='#["Invoking Service Contracts PAPI request for " ++ sizeOf(payload.contracts) ++ " contracts"]'>
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<try doc:name="Try" doc:id="de0d77d0-37cf-4597-a9ae-596f29ee116a" >
			<until-successful maxRetries="${serviceContractsPAPI.untilsuccessful.serviceContracts.retries}" doc:name="Until Successful" doc:id="c682899a-0bcc-45f7-9c28-b9ded506739f" millisBetweenRetries="${serviceContractsPAPI.untilsuccessful.serviceContracts.frequency}">
			<http:request method="PATCH" doc:name="Request Send Contracts" doc:id="7ee624ac-12f1-4bd2-a52f-13f4216ccb08" config-ref="Service_Contract_PAPI_HTTP_Request" path="/service-contracts" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:body><![CDATA[#[%dw 2.0
output application/json skipNullOn="everywhere"
---
payload.contracts]]]></http:body>
			<http:headers><![CDATA[#[output application/java
---
{
	"x-source-system" : "C&B"
}]]]></http:headers>
		</http:request>
		</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="07bb9d12-b489-416e-9e46-e996cb07abdb" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked Service Contracts PAPI request"]' tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    successCount: payload.successCount,
    errorCount: payload.errorCount,
    totalCount: payload.totalCount,
    errorItems: payload.errorItems
}]]]></json-logger:content>
		</json-logger:logger>
			<ee:transform doc:name="Contract Error Hospital Payload" doc:id="6b0c0ee4-cded-4e5e-89dd-f6da489a543a">
			<ee:message />
			<ee:variables>
				<ee:set-variable resource="dwl/contracts-error-hospital-payload.dwl" variableName="errorHospitalPayload" />
			</ee:variables>
		</ee:transform>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="98ef9767-0669-438c-ac1b-56780f4feef1" >
					<json-logger:logger doc:name="Logger" doc:id="2348ed0b-7b6a-48b3-b3bf-0b2906028b78" config-ref="JSON_Logger_Config_cnb" message='#["Error invoking Service Contracts PAPI request"]' tracePoint="EXCEPTION" >
						<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    
}]]]></json-logger:content>
					</json-logger:logger>
					<ee:transform doc:name="Transform Message" doc:id="937fcc62-865c-4985-8ccf-677a2c63cf32" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="errorHospitalPayload" ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json
---
payload.contracts map ((item, index) -> {
	"errorDetails": error.description,
	"dataFlow": "cnb-service-contracts",
	"errorText": error.detailedDescription,
	"payload": write(item, "application/json"),
	"retryCount": 0,
	"retryFlag": false,
	"sourceSystem": "CNB",
	"status": "Retry",
	"targetSystem": "SALESFORCE"
})]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</on-error-continue>
			</error-handler>
		</try>
		<json-logger:logger doc:name="Logger" doc:id="ed1ffefd-e96d-4543-8ad7-4e78d063b3cf" config-ref="JSON_Logger_Config_cnb" message="Service Contracts Error Hospital Payload">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    errorHospitalPayload: JSONLoggerModule::stringifyNonJSON(vars.errorHospitalPayload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice" doc:id="4abbbee0-4144-4b8c-8a4a-80b8e4999bb5" >
			<when expression="#[(!isEmpty(vars.errorHospitalPayload)) and (sizeOf(vars.errorHospitalPayload) &gt; 0)]" >
				<json-logger:logger doc:name="Logger" doc:id="d3f0fd77-5644-44f8-aba0-2c332c8248fe" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored records to Error Hospital, errored records count " ++ sizeOf(vars.errorHospitalPayload)]' tracePoint="FLOW" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference invoke-error-hospital-impl-subflow" doc:id="cccca266-430f-46c5-b42d-71f5f6111008" name="invoke-error-hospital-impl-subflow" />
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="42a355e6-69d3-452e-b145-2ab7526fe552" config-ref="JSON_Logger_Config_cnb" message='#["No records to send to Error Hospital"]' tracePoint="FLOW" >
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	
</sub-flow>
	
	<sub-flow name="service-contract-lines-papi-callout" doc:id="71120d0d-7a29-4cc3-93db-855ec7a50aa0" >
		<json-logger:logger doc:name="Logger" doc:id="feecef87-3c24-43b7-956d-27589aaac1df" config-ref="JSON_Logger_Config_cnb" message='#["Invoking Service Contract Lines PAPI request for " ++ sizeOf(payload) ++ " contract lines"]' >
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<ee:transform doc:name="payload" doc:id="a4220360-1b29-4742-9da3-d450230b0998" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
			<ee:variables >
			</ee:variables>
		</ee:transform>
		<try doc:name="Try" doc:id="33ebc5d1-fdfc-453e-a304-4305ae24df6f" >
			<until-successful maxRetries="${serviceContractsPAPI.untilsuccessful.serviceContractLines.retries}" doc:name="Until Successful" doc:id="9041e54d-ae56-4e9e-ad83-d2631acd0060" millisBetweenRetries="${serviceContractsPAPI.untilsuccessful.serviceContractLines.frequency}">
				<http:request method="PATCH" doc:name="Request Send Contract Lines" doc:id="9bc470bc-a28a-4015-af22-85797a516bef" config-ref="Service_Contract_PAPI_HTTP_Request" path="/service-contract-lines" sendCorrelationId="ALWAYS" correlationId="#[correlationId]">
			<http:headers><![CDATA[#[output application/java
---
{
	"x-source-system" : "C&B"
}]]]></http:headers>
		</http:request>
			</until-successful>
			<json-logger:logger doc:name="Logger" doc:id="a5b84f61-1051-4162-a2a2-3fba67c67742" config-ref="JSON_Logger_Config_cnb" message='#["Successfully invoked Service Contract Lines PAPI request"]' tracePoint="AFTER_REQUEST">
			<json-logger:content><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    successCount: payload.successCount,
    errorCount: payload.errorCount,
    totalCount: payload.totalCount,
    errorItems: payload.errorItems
}]]]></json-logger:content>
		</json-logger:logger>
			<ee:transform doc:name="Contract Lines Error Hospital Payload" doc:id="e6ef2d3e-3e47-42d0-b5d2-df92064c102b">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable resource="dwl/contract-lines-error-hospital-payload.dwl" variableName="errorHospitalPayload" />
			</ee:variables>
		</ee:transform>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="8182c47d-5fa5-48c0-b3e0-597240efb338" >
					<json-logger:logger doc:name="Logger" doc:id="e2ecc369-d4c8-4386-b8e9-3a6013cc5f54" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored records to Error Hospital"]' tracePoint="EXCEPTION" >
						<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
					</json-logger:logger>
					<ee:transform doc:name="Transform Message" doc:id="035d7b8f-b3b0-460a-91ee-5e856df365f5" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="errorHospitalPayload" ><![CDATA[%dw 2.0
output application/json
---
payload map ((item, index) -> {
	"errorDetails": error.description,
	"dataFlow": "cnb-service-contract-lines",
	"errorText": error.detailedDescription,
	"payload": write(item, "application/json"),
	"retryCount": 0,
	"retryFlag": false,
	"sourceSystem": "CNB",
	"status": "Retry",
	"targetSystem": "SALESFORCE"
})]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
				</on-error-continue>
			</error-handler>
		</try>
		<json-logger:logger doc:name="Logger" doc:id="c3792985-191c-42e1-8058-efb23f3f9647" config-ref="JSON_Logger_Config_cnb" message="Service Contract Lines Error Hospital Payload">
			<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    errorHospitalPayload: JSONLoggerModule::stringifyNonJSON(vars.errorHospitalPayload) 
}]]]></json-logger:content>
		</json-logger:logger>
		<choice doc:name="Choice" doc:id="f9b6091d-3ff6-4ac8-8dfa-1bbd54b9165c">
			<when expression="#[(!isEmpty(vars.errorHospitalPayload)) and (sizeOf(vars.errorHospitalPayload) &gt; 0)]">
				<json-logger:logger doc:name="Logger" doc:id="a9787fc4-a8ad-4de0-b9ae-cef6015fe0f6" config-ref="JSON_Logger_Config_cnb" message='#["Sending Errored records to Error Hospital, errored records count " ++ sizeOf(vars.errorHospitalPayload)]' tracePoint="FLOW">
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
				<flow-ref doc:name="Flow Reference invoke-error-hospital-impl-subflow" doc:id="c7c8f703-c035-469e-a8db-5a732dfeb5db" name="invoke-error-hospital-impl-subflow"/>
			</when>
			<otherwise >
				<json-logger:logger doc:name="Logger" doc:id="822ae90e-6c0b-4c7d-a788-af01e3368e9b" config-ref="JSON_Logger_Config_cnb" tracePoint="FLOW" message='#["No records to send to Error Hospital"]'>
					<json-logger:content ><![CDATA[#[import modules::JSONLoggerModule output application/json ---
{
    //payload: JSONLoggerModule::stringifyNonJSON(payload) 
}]]]></json-logger:content>
				</json-logger:logger>
			</otherwise>
		</choice>
	
</sub-flow>
		<sub-flow name="timestamp-set-and-retrieve-subflow" doc:id="8fcdf266-2f8e-4954-b9f4-c353e83b6557" >
		<os:retrieve-all doc:name="Retrieve timeStamp" doc:id="4db444ce-7641-4ca9-b56f-73a3ce359a4a" objectStore="TimeStamp_OS" target="timeStamps" />
		<choice doc:name="Check for TimeStamp" doc:id="65070e58-35da-4941-a7cb-e8859ba683f0">
			<when expression="#[vars.timeStamps.fromDate != null]">
				<set-variable value="#[vars.timeStamps.fromDate]" doc:name="Read fromDate from OS" doc:id="b296c949-b739-4eee-bf2a-7736953c863d" variableName="fromDate" />
				<set-variable value="#[vars.timeStamps.toDate]" doc:name="Read toDate from OS" doc:id="0d878c1b-9e88-4087-8150-58cbfd2cc7dd" variableName="toDate" />
			</when>
			<otherwise>
				<ee:transform doc:name="Transform Message" doc:id="d54e415b-6332-4bf9-9904-45778bedcf42">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/java

var toDateDiff = p("cnbContractsBatch.toDateDiff")
var fromDateDiff = p("cnbContractsBatch.fromDateDiff")


var toDate = ((now() >> 'UTC') as DateTime {format: "yyyy-mm-dd'T'hh.mm.ss'Z'"}) - ("PT$(toDateDiff)M" as Period)
var fromDate = ((now() >> 'UTC') as DateTime {format: "yyyy-mm-dd'T'hh.mm.ss'Z'"}) - ("PT$(fromDateDiff)M" as Period)
---
{
  toDate: toDate as String { format: "yyyy-MM-dd'T'HH:mm:ss'Z'" },
  fromDate: fromDate as String { format: "yyyy-MM-dd'T'HH:mm:ss'Z'" }
}]]></ee:set-payload>
					</ee:message>
					<ee:variables>
					</ee:variables>
				</ee:transform>
				<os:store doc:name="Store fromDate" doc:id="504a277c-bc8d-4755-9e8f-4bc8370cb976" key="fromDate" objectStore="TimeStamp_OS">
					<os:value><![CDATA[#[payload.fromDate]]]></os:value>
				</os:store>
				<set-variable value="#[payload.fromDate]" doc:name="Set Variable fromDate" doc:id="04d628e5-b615-48f8-b2d0-a6a4fa58fc20" variableName="fromDate" />
				<set-variable value="#[payload.toDate]" doc:name="Set Variable toDate" doc:id="8f9dd1ef-f5b4-4c12-ad04-6a86380aea91" variableName="toDate" />
				<os:store doc:name="Store toDate" doc:id="8a2d4930-07c7-4e49-8288-c919ea768e29" key="toDate" objectStore="TimeStamp_OS">
					<os:value><![CDATA[#[payload.toDate]]]></os:value>
				</os:store>
			
</otherwise>
		</choice>
	</sub-flow>
	</mule>
